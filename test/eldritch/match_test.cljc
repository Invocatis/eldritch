(ns eldritch.match-test
  (:require
   [eldritch.match :as match :refer [matches? match]]
   [clojure.test :as t :refer [deftest testing is are]]))

(deftest test|matches?
  (testing "Matches?"
   (is (matches? 0 0))
   (is (matches? "asdf" "asdf"))
   (is (matches? nil nil))
   (is (matches? [0 1 2] [0 1 2]))
   (is (matches? (list 0 1 2) (list 0 1 2)))
   (is (matches? [0 [1 [2]]] [0 [1 [2]]]))
   (is (matches? (list 0 (list 1 (list 2))) (list 0 (list 1 (list 2)))))
   (is (matches? {:x 1} {:x 1}))
   (is (matches? {:x [1 (list 2 [3])]} {:x [1 (list 2 [3])]}))

   (is (not (matches? 0 1)))
   (is (not (matches? "asdf" "qwer")))
   (is (not (matches? nil (Object.))))
   (is (not (matches? (list 0 1 2) (list 0 1 3))))
   (is (not (matches? [0 [1 [2]]] [0 [1 [3]]])))
   (is (not (matches? (list 0 (list 1 (list 2))) (list 0 (list 1 (list 3))))))
   (is (not (matches? {:x 1} {:x 2})))
   (is (not (matches? {:x [1 (list 2 [3])]} {:x [1 (list 2 [4])]})))

   (is (matches? 'x 0))
   (is (matches? 'x "asdf"))
   (is (matches? 'x nil))
   (is (matches? '[x y z] [1 2 3]))
   (is (matches? '[x y z] [1 1 1]))
   (is (matches? '[x x x] [1 1 1]))
   (is (matches? (list 'x 'y 'z) (list 1 2 3)))
   (is (matches? (list 'x 'y 'z) (list 1 1 1)))
   (is (matches? (list 'x 'x 'x) (list 1 1 1)))
   (is (matches? ['x ['y ['z]]] [0 [1 [2]]]))
   (is (matches? ['x ['y ['z]]] [1 [1 [1]]]))
   (is (matches? ['x ['x ['x]]] [1 [1 [1]]]))
   (is (matches? (list 'x (list 'y (list 'z))) (list 0 (list 1 (list 2)))))
   (is (matches? (list 'x (list 'y (list 'z))) (list 1 (list 1 (list 1)))))
   (is (matches? (list 'x (list 'x (list 'x))) (list 1 (list 1 (list 1)))))
   (is (matches? {:x 'x :y 'y :z 'z} {:x 1 :y 2 :z 3}))
   (is (matches? {:x 'x :y 'y :z 'z} {:x 1 :y 1 :z 1}))
   (is (matches? {:x 'x :y 'x :z 'x} {:x 1 :y 1 :z 1}))
   (is (matches? {:x ['x (list 'y ['z])]} {:x [1 (list 2 [3])]}))
   (is (matches? {:x ['x (list 'y ['z])]} {:x [1 (list 1 [1])]}))
   (is (matches? {:x ['x (list 'x ['x])]} {:x [1 (list 1 [1])]}))

   (is (not (matches? '[x x x] [1 1 2])))
   (is (not (matches? (list 'x 'x 'x) (list 1 1 2))))
   (is (not (matches? ['x ['x ['x]]] [1 [1 [2]]])))
   (is (not (matches? (list 'x (list 'x (list 'x))) (list 1 (list 1 (list 2))))))
   (is (not (matches? {:x 'x :y 'x :z 'x} {:x 1 :y 1 :z 2})))
   (is (not (matches? {:x ['x (list 'x ['x])]} {:x [1 (list 1 [2])]})))))


(deftest test|match
  (testing "Match"
   (is (match 0 0))
   (is (match "asdf" "asdf"))
   (is (match nil nil))
   (is (match [0 1 2] [0 1 2]))
   (is (match (list 0 1 2) (0 1 2)))
   (is (match [0 [1 [2]]] [0 [1 [2]]]))
   (is (match (list 0 (list 1 (list 2))) (0 (1 (2)))))
   (is (match {:x 1} {:x 1}))
   (is (match {:x [1 (list 2 [3])]} {:x [1 (2 [3])]}))

   (is (not (match 0 1)))
   (is (not (match "asdf" "qwer")))
   (is (not (match :some-object nil)))
   (is (not (match (list 0 1 2) (list 0 1 3))))
   (is (not (match [0 [1 [2]]] [0 [1 [3]]])))
   (is (not (match (list 0 (list 1 (list 2))) (list 0 (list 1 (list 3))))))
   (is (not (match {:x 1} {:x 2})))
   (is (not (match {:x [1 (list 2 [3])]} {:x [1 (list 2 [4])]})))

   (is (match 0 x))
   (is (match "asdf" x))
   (is (match nil x))
   (is (match [1 2 3] [x y z]))
   (is (match [1 1 1] [x y z]))
   (is (match [1 1 1] [x x x]))
   (is (match (list 1 2 3) (x y z)))
   (is (match (list 1 1 1) (x y z)))
   (is (match (list 1 1 1) (x x x)))
   (is (match [0 [1 [2]]] [x [y [z]]]))
   (is (match [1 [1 [1]]] [x [y [z]]]))
   (is (match [1 [1 [1]]] [x [x [x]]]))
   (is (match (list 0 (list 1 (list 2))) (x (y (z)))))
   (is (match (list 1 (list 1 (list 1))) (x (y (z)))))
   (is (match (list 1 (list 1 (list 1))) (x (x (x)))))
   (is (match {:x 1 :y 2 :z 3} {:x x :y y :z z}))
   (is (match {:x 1 :y 1 :z 1} {:x x :y y :z z}))
   (is (match {:x 1 :y 1 :z 1} {:x x :y x :z x}))
   (is (match {:x [1 (list 2 [3])]} {:x [x (y [z])]}))
   (is (match {:x [1 (list 1 [1])]} {:x [x (y [z])]}))
   (is (match {:x [1 (list 1 [1])]} {:x [x (x [x])]}))

   (is (not (match [1 1 2] [x x x])))
   (is (not (match (list 1 1 2) (x x x))))
   (is (not (match [1 [1 [2]]] [x [x [x]]])))
   (is (not (match (list 1 (list 1 (list 2))) (x (x (x))))))
   (is (not (match {:x 1 :y 1 :z 2} {:x x :y x :z x})))
   (is (not (match {:x [1 (list 1 [2])]} {:x [x (x [x])]})))))
